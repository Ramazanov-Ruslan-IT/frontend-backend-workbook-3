const express = require('express');
const fs = require('fs');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = 8080;
const DATA_FILE = path.join(__dirname, '../data/products.json');

app.use(express.json());
app.use(cors());
console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...");

console.log("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:", DATA_FILE);
console.log("üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?", fs.existsSync(DATA_FILE));

app.listen(PORT, () => {
    console.log(`‚úÖ API –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
});

function readProducts() {
    if (!fs.existsSync(DATA_FILE)) return [];
    try {
        const data = fs.readFileSync(DATA_FILE, 'utf8');
        console.log("üìñ JSON —Å—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
        return JSON.parse(data) || [];
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON:", err);
        return [];
    }
}

function writeProducts(products) {
    try {
        fs.writeFileSync(DATA_FILE, JSON.stringify(products, null, 2), 'utf8');
        return true;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON:", err);
        return false;
    }
}

app.get('/products', (req, res) => {
    console.log("üì• GET /products");
    res.json(readProducts());
});

app.post('/products', (req, res) => {
    console.log("üì§ POST /products", req.body);
    let products = readProducts();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è id (–Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
    const maxId = products.length > 0 ? Math.max(...products.map(p => p.id || 0)) : 0;
    const newProduct = { id: maxId + 1, ...req.body };

    products.push(newProduct);

    if (writeProducts(products)) {
        console.log("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω:", newProduct);
        res.status(201).json(newProduct);
    } else {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏' });
    }
});

app.delete('/products/:id', (req, res) => {
    console.log("üóëÔ∏è DELETE /products", req.params.id);

    let products = readProducts();
    const productId = Number(req.params.id); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É

    if (isNaN(productId)) {
        console.log("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID");
        return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" });
    }

    const filteredProducts = products.filter(p => Number(p.id) !== productId);

    if (filteredProducts.length === products.length) {
        console.log("‚ùå –û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (writeProducts(filteredProducts)) {
        console.log(`‚úÖ –¢–æ–≤–∞—Ä —Å ID ${productId} —É–¥–∞–ª—ë–Ω`);
        res.status(200).json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω' });
    } else {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ JSON");
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏' });
    }
});
